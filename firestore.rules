rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isSignedIn() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    function getUserLinkedPlayerId() {
      return isSignedIn() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) ?
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.linkedPlayerId : null;
    }
    
    // Allow read access to all authenticated users for common collections
    match /{document=**} {
      allow read: if isSignedIn();
    }

    // User rules
    match /users/{userId} {
      allow create: if isSignedIn() && 
        request.auth.uid == userId &&
        request.resource.data.keys().hasAll(['email', 'name', 'isAdmin', 'createdAt']) &&
        request.resource.data.isAdmin is bool &&
        request.resource.data.email is string &&
        request.resource.data.name is string &&
        request.resource.data.createdAt is timestamp;
      
      allow read: if isSignedIn();
      
      // Regular users can only update their name and customEmoji
      allow update: if (request.auth.uid == userId && 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'customEmoji']) &&
        (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['name']) || request.resource.data.name is string) &&
        (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['customEmoji']) || request.resource.data.customEmoji is string || request.resource.data.customEmoji == null)) ||
      // Admins can update all fields
      (isAdmin() && 
        request.resource.data.keys().hasAll(['email', 'name', 'isAdmin']) &&
        request.resource.data.isAdmin is bool &&
        request.resource.data.email is string &&
        request.resource.data.name is string);
      
      allow delete: if isAdmin();
    }
    
    // Player rules
    match /players/{playerId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
      allow update: if isSignedIn() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.linkedPlayerId == playerId &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['customEmoji']) &&
        (request.resource.data.customEmoji is string || request.resource.data.customEmoji == null);
    }
    
    // Tournament rules
    match /tournaments/{tournamentId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
      allow update: if isAdmin() || (
        isSignedIn() && 
        getUserLinkedPlayerId() != null
      );
      
      match /games/{gameId} {
        allow read: if isSignedIn();
        allow create: if isAdmin();
        allow update: if isAdmin() || (
          isSignedIn() && 
          getUserLinkedPlayerId() != null && (
            // Check if player is directly in the game OR in the allowedEditors list (for four-ball support)
            (resource.data.usaPlayerId == getUserLinkedPlayerId() ||
             resource.data.europePlayerId == getUserLinkedPlayerId() ||
             (resource.data.allowedEditors != null && getUserLinkedPlayerId() in resource.data.allowedEditors)) &&
            (request.resource.data.usaPlayerId == getUserLinkedPlayerId() ||
             request.resource.data.europePlayerId == getUserLinkedPlayerId() ||
             (request.resource.data.allowedEditors != null && getUserLinkedPlayerId() in request.resource.data.allowedEditors)) &&
            // Ensure all required fields are present and unchanged
            request.resource.data.usaPlayerId == resource.data.usaPlayerId &&
            request.resource.data.europePlayerId == resource.data.europePlayerId &&
            request.resource.data.usaPlayerName == resource.data.usaPlayerName &&
            request.resource.data.europePlayerName == resource.data.europePlayerName &&
            request.resource.data.tournamentId == resource.data.tournamentId &&
            request.resource.data.playerIds == resource.data.playerIds &&
            // Ensure allowedEditors field is not tampered with by non-admins
            (resource.data.allowedEditors == null || request.resource.data.allowedEditors == resource.data.allowedEditors) &&
            // Only allow updating specific fields
            request.resource.data.diff(resource.data).affectedKeys()
              .hasOnly(['holes', 'strokePlayScore', 'matchPlayScore', 'points', 'status', 'isStarted', 'isComplete', 'endTime', 'updatedAt'])
          )
        );
        allow delete: if isAdmin();
      }
    }

    // Config rules
    match /config/{configId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
  }
}