rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isSignedIn() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // Allow read access to all authenticated users for common collections
    match /{document=**} {
      allow read: if isSignedIn();
    }

    // User rules
    match /users/{userId} {
      allow create: if isSignedIn() && 
        request.auth.uid == userId &&
        request.resource.data.keys().hasAll(['email', 'name', 'isAdmin', 'createdAt']) &&
        request.resource.data.isAdmin is bool &&
        request.resource.data.email is string &&
        request.resource.data.name is string &&
        request.resource.data.createdAt is timestamp;
      
      allow read: if isSignedIn();
      
      // Regular users can only update their name and email
      allow update: if (request.auth.uid == userId && 
        request.resource.data.keys().hasAll(['email', 'name']) &&
        request.resource.data.email is string &&
        request.resource.data.name is string) ||
      // Admins can update all fields
      (isAdmin() && 
        request.resource.data.keys().hasAll(['email', 'name', 'isAdmin']) &&
        request.resource.data.isAdmin is bool &&
        request.resource.data.email is string &&
        request.resource.data.name is string);
      
      allow delete: if isAdmin();
    }
    
    // Player rules
    match /players/{playerId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
    // Tournament rules
    match /tournaments/{tournamentId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
      
      match /games/{gameId} {
        allow read: if isSignedIn();
        allow write: if isAdmin() || (
          isSignedIn() && (
            resource.data.usaPlayerId == request.auth.uid ||
            resource.data.europePlayerId == request.auth.uid
          )
        );
      }
    }

    // Config rules
    match /config/{configId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    // Blog rules
    match /blog-posts/{postId} {
      allow read: if isSignedIn();
      
      allow create: if isAdmin() && 
        request.resource.data.keys().hasAll(['title', 'content', 'authorId', 'createdAt', 'updatedAt']) &&
        request.resource.data.authorId == request.auth.uid &&
        request.resource.data.title is string &&
        request.resource.data.content is string &&
        request.resource.data.createdAt is timestamp &&
        request.resource.data.updatedAt is timestamp;
      
      allow update: if isAdmin() && 
        request.auth.uid == resource.data.authorId &&
        request.resource.data.keys().hasAll(['title', 'content', 'authorId', 'createdAt', 'updatedAt']) &&
        request.resource.data.title is string &&
        request.resource.data.content is string &&
        request.resource.data.createdAt is timestamp &&
        request.resource.data.updatedAt is timestamp &&
        request.resource.data.updatedAt > resource.data.updatedAt;
      
      allow delete: if isAdmin() && request.auth.uid == resource.data.authorId;
    }
  }
}